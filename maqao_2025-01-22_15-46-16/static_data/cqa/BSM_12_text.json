{
  "_cqa_text_report":
    {
      "_objects":
        {
          "image_vec_align":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/vec_align.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_2x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_8x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/8x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "list_path_1_cvt_1":
            {
              "dynamic": true,
              "initial": "closed",
              "type": "list",
              "lines":
                [
                "/tools/acfl/24.04/gcc-13.2.0_AmazonLinux-2/include/c++/13.2.0/bits/random.tcc:3364"
                ],
              "header": ""
            },
          "image_2x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_row_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/row_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_col_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/col_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_256.svg",
              "size":
                {
                  "x": 500
                }
            }
        },
      "AVG":
        {
          "hint":
            [
              {
                "workaround": "Avoid mixing data with different types. In particular, check if the type of constants is the same as array elements.",
                "details": " - UCVTF: 1 occurrences<<list_path_1_cvt_1>>\n",
                "title": "Conversion instructions",
                "txt": "Detected expensive conversion instructions."
              },
              {
                "title": "Matching between your loop (in the source code) and the binary loop",
                "txt": "The binary loop is composed of 3 FP arithmetical operations:\n - 1: addition or subtraction (all inside FMA instructions)\n - 2: multiply (1 inside FMA instructions)\nThe binary loop is loading 8 bytes.\nThe binary loop is storing 8 bytes."
              },
              {
                "title": "Arithmetic intensity",
                "txt": "Arithmetic intensity is 0.19 FP operations per loaded or stored byte."
              }
            ],
          "expert":
            [
              {
                "title": "General properties",
                "txt": "nb instructions    : 19\nloop length        : 76\nnb stack references: 0\n"
              },
              {
                "title": "Front-end",
                "txt": "FIT IN UOP CACHE\nfront end: 2.38 cycles\n"
              },
              {
                "title": "Back-end",
                "txt": "       | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9   | P10  | P11  | P12  | P13  | P14  | P15  | P16\n-----------------------------------------------------------------------------------------------------------------------------\nuops   | 1.00 | 1.00 | 2.25 | 2.08 | 2.17 | 2.17 | 2.17 | 2.17 | 0.50 | 0.50 | 0.50 | 0.50 | 0.83 | 0.50 | 0.67 | 0.50 | 0.50\ncycles | 1.00 | 1.00 | 2.25 | 2.08 | 2.17 | 2.17 | 2.17 | 2.17 | 0.50 | 0.50 | 0.50 | 0.50 | 0.83 | 0.50 | 0.67 | 0.50 | 0.50\n\nExecution ports to units layout:\n - P0: BRU\n - P1: BRU\n - P2: ALU\n - P3: ALU\n - P4: ALU\n - P5: ALU\n - P6: ALU\n - P7: ALU\n - P8 (128 bits): VPU, FP store data, ALU, DIV/SQRT\n - P9 (128 bits): VPU, ALU, FP store data\n - P10 (128 bits): VPU, ALU, DIV/SQRT\n - P11 (128 bits): ALU, VPU\n - P12 (256 bits): store address, load\n - P13 (256 bits): store address, load\n - P14 (256 bits): load\n - P15 (64 bits): store data\n - P16 (64 bits): store data\n\nCycles executing div or sqrt instructions: NA\nLongest recurrence chain latency (RecMII): 3.00\n"
              },
              {
                "title": "Cycles summary",
                "txt": "Front-end : 2.38\nData deps.: 3.00\nOverall L1: 3.00\n"
              },
              {
                "title": "Vectorization ratios",
                "txt": "INT\nall    : 0%\nload   : 0%\nstore  : 0%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 0%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 0%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 0%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : 0%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\nINT+FP\nall     : 0%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : 0%\nfma     : 0%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 0%\n"
              },
              {
                "title": "Cycles and memory resources usage",
                "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 3.00 cycles. At this rate:\n - 2% of peak load performance is reached (2.67 out of 96.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 5% of peak store performance is reached (2.67 out of 48.00 bytes stored per cycle (GB/s @ 1GHz))\n"
              },
              {
                "title": "ASM code",
                "txt": "In the binary file, the address of the loop is: 402088\n\nInstruction                                                                                                                                                                                       | Nb FU | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9   | P10  | P11  | P12  | P13  | P14  | P15  | P16  | Latency | Recip. throughput | Vectorization\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nLDR X1, [X19, X2,LSL #3]                                                                                                                                                                          | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0    | 0    | 4       | 0.33              | scal (50.0%)\nADD X0, X2, #1                                                                                                                                                                                    | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nORR X2, XZR, X0                                                                                                                                                                                   | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | N/A\nSTR X0, [X19, #4992]                                                                                                                                                                              | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (50.0%)\nUBFM X0, X1, #11, #42                                                                                                                                                                             | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nEOR X1, X1, X0                                                                                                                                                                                    | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nAND X0, X22, X1,LSL #7                                                                                                                                                                            | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nEOR X1, X1, X0                                                                                                                                                                                    | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nAND X0, X21, X1,LSL #15                                                                                                                                                                           | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nEOR X1, X1, X0                                                                                                                                                                                    | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nEOR X1, X1, X1,LSR #18                                                                                                                                                                            | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nUCVTF D1, X1                                                                                                                                                                                      | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 3       | 1                 | scal (50.0%)\nFMADD D8, D1, D9, D8                                                                                                                                                                              | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 4       | 0.25              | scal (50.0%)\nFMUL D9, D9, D10                                                                                                                                                                                  | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 3       | 0.25              | scal (50.0%)\nCMP W20, #1                                                                                                                                                                                       | 1     | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.33              | scal (25.0%)\nB.EQ 4020e4 <_ZSt18generate_canonicalIdLm53ESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEET_RT1_+0xa4> | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nMOVZ W20, #1                                                                                                                                                                                      | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (25.0%)\nCMP X2, #623                                                                                                                                                                                      | 1     | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.33              | N/A\nB.LS 402088 <_ZSt18generate_canonicalIdLm53ESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEET_RT1_+0x48> | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\n"
              }
            ],
          "header":
            [
            "3% of peak computational performance is used (1.00 out of 32.00 FLOP per cycle (GFLOPS @ 1GHz))"
            ],
          "brief":
            [

            ],
          "gain":
            [
              {
                "workaround": " - Try another compiler or update/tune your current one:\n  * recompile with fassociative-math (included in Ofast or ffast-math) to extend loop vectorization to FP reductions.\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly:\nC storage order is row-major: for(i) for(j) a[j][i] = b[j][i]; (slow, non stride 1) => for(i) for(j) a[i][j] = b[i][j]; (fast, stride 1)<<image_row_maj>>\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                "details": "All VPU instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized loop can use their full power.\n",
                "title": "Vectorization",
                "txt": "Your loop is not vectorized.\nOnly 46% of vector register length is used (average across all VPU instructions).\nBy vectorizing your loop, you can lower the cost of an iteration from 3.00 to 1.26 cycles (2.38x speedup)."
              }
            ],
          "potential":
            [
              {
                "title": "FMA",
                "txt": "Detected 1 FMA (fused multiply-add) operations."
              }
            ]
        },
      "paths":
        [
          {
            "hint":
              [
                {
                  "workaround": "Avoid mixing data with different types. In particular, check if the type of constants is the same as array elements.",
                  "details": " - UCVTF: 1 occurrences<<list_path_1_cvt_1>>\n",
                  "title": "Conversion instructions",
                  "txt": "Detected expensive conversion instructions."
                },
                {
                  "title": "Matching between your loop (in the source code) and the binary loop",
                  "txt": "The binary loop is composed of 3 FP arithmetical operations:\n - 1: addition or subtraction (all inside FMA instructions)\n - 2: multiply (1 inside FMA instructions)\nThe binary loop is loading 8 bytes.\nThe binary loop is storing 8 bytes."
                },
                {
                  "title": "Arithmetic intensity",
                  "txt": "Arithmetic intensity is 0.19 FP operations per loaded or stored byte."
                }
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 19\nloop length        : 76\nnb stack references: 0\n"
                },
                {
                  "title": "Front-end",
                  "txt": "FIT IN UOP CACHE\nfront end: 2.38 cycles\n"
                },
                {
                  "title": "Back-end",
                  "txt": "       | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9   | P10  | P11  | P12  | P13  | P14  | P15  | P16\n-----------------------------------------------------------------------------------------------------------------------------\nuops   | 1.00 | 1.00 | 2.25 | 2.08 | 2.17 | 2.17 | 2.17 | 2.17 | 0.50 | 0.50 | 0.50 | 0.50 | 0.83 | 0.50 | 0.67 | 0.50 | 0.50\ncycles | 1.00 | 1.00 | 2.25 | 2.08 | 2.17 | 2.17 | 2.17 | 2.17 | 0.50 | 0.50 | 0.50 | 0.50 | 0.83 | 0.50 | 0.67 | 0.50 | 0.50\n\nExecution ports to units layout:\n - P0: BRU\n - P1: BRU\n - P2: ALU\n - P3: ALU\n - P4: ALU\n - P5: ALU\n - P6: ALU\n - P7: ALU\n - P8 (128 bits): VPU, FP store data, ALU, DIV/SQRT\n - P9 (128 bits): VPU, ALU, FP store data\n - P10 (128 bits): VPU, ALU, DIV/SQRT\n - P11 (128 bits): ALU, VPU\n - P12 (256 bits): store address, load\n - P13 (256 bits): store address, load\n - P14 (256 bits): load\n - P15 (64 bits): store data\n - P16 (64 bits): store data\n\nCycles executing div or sqrt instructions: NA\nLongest recurrence chain latency (RecMII): 3.00\n"
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 2.38\nData deps.: 3.00\nOverall L1: 3.00\n"
                },
                {
                  "title": "Vectorization ratios",
                  "txt": "INT\nall    : 0%\nload   : 0%\nstore  : 0%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: 0%\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 0%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 0%\nadd-sub : NA (no add-sub vectorizable/vectorized instructions)\nfma     : 0%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : NA (no other vectorizable/vectorized instructions)\nINT+FP\nall     : 0%\nload    : 0%\nstore   : 0%\nmul     : 0%\nadd-sub : 0%\nfma     : 0%\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 0%\n"
                },
                {
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 3.00 cycles. At this rate:\n - 2% of peak load performance is reached (2.67 out of 96.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 5% of peak store performance is reached (2.67 out of 48.00 bytes stored per cycle (GB/s @ 1GHz))\n"
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the loop is: 402088\n\nInstruction                                                                                                                                                                                       | Nb FU | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9   | P10  | P11  | P12  | P13  | P14  | P15  | P16  | Latency | Recip. throughput | Vectorization\n------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nLDR X1, [X19, X2,LSL #3]                                                                                                                                                                          | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0    | 0    | 4       | 0.33              | scal (50.0%)\nADD X0, X2, #1                                                                                                                                                                                    | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nORR X2, XZR, X0                                                                                                                                                                                   | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | N/A\nSTR X0, [X19, #4992]                                                                                                                                                                              | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (50.0%)\nUBFM X0, X1, #11, #42                                                                                                                                                                             | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nEOR X1, X1, X0                                                                                                                                                                                    | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nAND X0, X22, X1,LSL #7                                                                                                                                                                            | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nEOR X1, X1, X0                                                                                                                                                                                    | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nAND X0, X21, X1,LSL #15                                                                                                                                                                           | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nEOR X1, X1, X0                                                                                                                                                                                    | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nEOR X1, X1, X1,LSR #18                                                                                                                                                                            | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nUCVTF D1, X1                                                                                                                                                                                      | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 3       | 1                 | scal (50.0%)\nFMADD D8, D1, D9, D8                                                                                                                                                                              | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 4       | 0.25              | scal (50.0%)\nFMUL D9, D9, D10                                                                                                                                                                                  | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 3       | 0.25              | scal (50.0%)\nCMP W20, #1                                                                                                                                                                                       | 1     | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.33              | scal (25.0%)\nB.EQ 4020e4 <_ZSt18generate_canonicalIdLm53ESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEET_RT1_+0xa4> | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nMOVZ W20, #1                                                                                                                                                                                      | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (25.0%)\nCMP X2, #623                                                                                                                                                                                      | 1     | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.33              | N/A\nB.LS 402088 <_ZSt18generate_canonicalIdLm53ESt23mersenne_twister_engineImLm32ELm624ELm397ELm31ELm2567483615ELm11ELm4294967295ELm7ELm2636928640ELm15ELm4022730752ELm18ELm1812433253EEET_RT1_+0x48> | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\n"
                }
              ],
            "header":
              [
              "3% of peak computational performance is used (1.00 out of 32.00 FLOP per cycle (GFLOPS @ 1GHz))"
              ],
            "brief":
              [

              ],
            "gain":
              [
                {
                  "workaround": " - Try another compiler or update/tune your current one:\n  * recompile with fassociative-math (included in Ofast or ffast-math) to extend loop vectorization to FP reductions.\n - Remove inter-iterations dependences from your loop and make it unit-stride:\n  * If your arrays have 2 or more dimensions, check whether elements are accessed contiguously and, otherwise, try to permute loops accordingly:\nC storage order is row-major: for(i) for(j) a[j][i] = b[j][i]; (slow, non stride 1) => for(i) for(j) a[i][j] = b[i][j]; (fast, stride 1)<<image_row_maj>>\n  * If your loop streams arrays of structures (AoS), try to use structures of arrays instead (SoA):\nfor(i) a[i].x = b[i].x; (slow, non stride 1) => for(i) a.x[i] = b.x[i]; (fast, stride 1)\n",
                  "details": "All VPU instructions are used in scalar version (process only one data element in vector registers).\nSince your execution units are vector units, only a vectorized loop can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your loop is not vectorized.\nOnly 46% of vector register length is used (average across all VPU instructions).\nBy vectorizing your loop, you can lower the cost of an iteration from 3.00 to 1.26 cycles (2.38x speedup)."
                }
              ],
            "potential":
              [
                {
                  "title": "FMA",
                  "txt": "Detected 1 FMA (fused multiply-add) operations."
                }
              ]
          }
        ],
      "common":
        {
          "header":
            [
            "The loop is defined in /tools/acfl/24.04/gcc-13.2.0_AmazonLinux-2/include/c++/13.2.0/bits/random.tcc:458-466,3362-3365.\n",
            "The related source loop is not unrolled or unrolled with no peel/tail loop."
            ],
          "nb_paths": 1
        }
    }
}
