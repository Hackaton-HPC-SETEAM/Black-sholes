{
  "_cqa_text_report":
    {
      "_objects":
        {
          "image_vec_align":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/vec_align.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_8x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/8x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_2x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_2x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_row_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/row_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_col_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/col_maj.svg",
              "size":
                {
                  "x": 500
                }
            }
        },
      "AVG":
        {
          "hint":
            [
              {
                "title": "Matching between your loop (in the source code) and the binary loop",
                "txt": "The binary loop is composed of 16 FP arithmetical operations:\n - 8: addition or subtraction\n - 8: multiply\nThe binary loop is loading 32 bytes.\nThe binary loop is storing 18 bytes."
              },
              {
                "title": "Arithmetic intensity",
                "txt": "Arithmetic intensity is 0.32 FP operations per loaded or stored byte."
              }
            ],
          "expert":
            [
              {
                "title": "General properties",
                "txt": "nb instructions    : 35\nloop length        : 140\nnb stack references: 0\n"
              },
              {
                "title": "Front-end",
                "txt": "FIT IN UOP CACHE\nfront end: 4.38 cycles\n"
              },
              {
                "title": "Back-end",
                "txt": "       | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9   | P10  | P11  | P12  | P13  | P14  | P15  | P16\n-----------------------------------------------------------------------------------------------------------------------------\nuops   | 1.50 | 1.50 | 1.50 | 1.50 | 1.50 | 1.50 | 6.50 | 6.50 | 2.00 | 2.00 | 2.00 | 2.00 | 2.33 | 2.33 | 2.33 | 0.00 | 0.00\ncycles | 1.50 | 1.50 | 1.50 | 1.50 | 1.50 | 1.50 | 6.50 | 6.50 | 2.00 | 2.00 | 2.00 | 2.00 | 2.33 | 2.33 | 2.33 | 0.00 | 0.00\n\nExecution ports to units layout:\n - P0: BRU\n - P1: BRU\n - P2: ALU\n - P3: ALU\n - P4: ALU\n - P5: ALU\n - P6: ALU\n - P7: ALU\n - P8 (128 bits): VPU, FP store data, ALU, DIV/SQRT\n - P9 (128 bits): VPU, ALU, FP store data\n - P10 (128 bits): VPU, ALU, DIV/SQRT\n - P11 (128 bits): ALU, VPU\n - P12 (256 bits): store address, load\n - P13 (256 bits): store address, load\n - P14 (256 bits): load\n - P15 (64 bits): store data\n - P16 (64 bits): store data\n\nCycles executing div or sqrt instructions: NA\n"
              },
              {
                "title": "Cycles summary",
                "txt": "Front-end : 4.38\nOverall L1: 6.50\n"
              },
              {
                "title": "Vectorization ratios",
                "txt": "INT\nall    : 17%\nload   : 20%\nstore  : 100%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 83%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 100%\nadd-sub : 100%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 50%\nINT+FP\nall     : 34%\nload    : 20%\nstore   : 100%\nmul     : 100%\nadd-sub : 100%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 8%\n"
              },
              {
                "title": "Cycles and memory resources usage",
                "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 6.50 cycles. At this rate:\n - 5% of peak load performance is reached (4.92 out of 96.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 5% of peak store performance is reached (2.77 out of 48.00 bytes stored per cycle (GB/s @ 1GHz))\n"
              },
              {
                "title": "ASM code",
                "txt": "In the binary file, the address of the loop is: 401bcc\n\nInstruction                           | Nb FU | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9   | P10  | P11  | P12  | P13  | P14  | P15 | P16 | Latency | Recip. throughput | Vectorization\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nMOVZ W1, #12160                       | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.17              | scal (25.0%)\nWHILELO P15.S, X22, X24               | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 3       | 1                 | N/A\nADD X2, SP, #208                      | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.17              | N/A\nSTR P15, [X2, #7, MUL VL]             | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0   | 0   | 1       | 0.50              | vect (12.5%)\nDUP Z31.S, #0                         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0   | 0   | 2       | 0.25              | scal (6.3%)\nCNTW X0, ALL                          | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 0.50              | N/A\nMOVZ X20, #0                          | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.17              | scal (50.0%)\nPTRUE P15.S, ALL                      | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 0.50              | scal (100.0%)\nFMOV S14, W1                          | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0   | 0   | 2       | 0.25              | scal (25.0%)\nCBZ X0, 401bcc <main._omp_fn.0+0x2e0> | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPTRUE P7.B, ALL                       | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 0.50              | scal (100.0%)\nADDPL X0, SP, #4                      | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 0.50              | N/A\nLD1RW {Z0.S}, P7/Z, [X0, #43]         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 6       | 0.33              | scal (25.0%)\nPTRUE P0.S, ALL                       | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 0.50              | scal (100.0%)\nFMUL Z0.S, Z0.S, Z31.S                | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0   | 0   | 3       | 0.25              | vect (100.0%)\nPTRUE P7.B, ALL                       | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 0.50              | scal (100.0%)\nADDPL X0, SP, #6                      | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 0.50              | N/A\nLD1RW {Z30.S}, P7/Z, [X0, #51]        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 6       | 0.33              | scal (25.0%)\nINCD X22, ALL                         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 0.50              | N/A\nPTRUE P7.B, ALL                       | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 0.50              | scal (100.0%)\nFCMGT P6.S, P7/Z, Z31.S, Z30.S        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 1                 | vect (100.0%)\nBL 401350 <@plt_start@+0x1d0>         | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPTRUE P7.B, ALL                       | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 0.50              | scal (100.0%)\nADDPL X0, SP, #4                      | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 0.50              | N/A\nLD1RW {Z31.S}, P7/Z, [X0, #41]        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 6       | 0.33              | scal (25.0%)\nFMUL Z31.S, Z31.S, Z0.S               | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0   | 0   | 3       | 0.25              | vect (100.0%)\nPTRUE P7.B, ALL                       | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 0.50              | scal (100.0%)\nLD1RW {Z30.S}, P7/Z, [X0, #42]        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 6       | 0.33              | scal (25.0%)\nADD X0, SP, #208                      | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.17              | N/A\nFADD Z31.S, Z31.S, Z30.S              | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0   | 0   | 2       | 0.25              | vect (100.0%)\nLDR Z30, [X0, #1, MUL VL]             | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 6       | 0.33              | vect (100.0%)\nFADD Z30.S, P6/M, Z30.S, Z31.S        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0   | 0   | 2       | 0.25              | vect (100.0%)\nSTR Z30, [X0, #1, MUL VL]             | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 0   | 0   | 2       | 0.50              | vect (100.0%)\nCMP X24, X22                          | 1     | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.33              | N/A\nB.HI 401a18 <main._omp_fn.0+0x12c>    | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\n"
              }
            ],
          "header":
            [
            "Warnings:\nget_path_cqa_results:\n - Detected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.\n",
            "7% of peak computational performance is used (2.46 out of 32.00 FLOP per cycle (GFLOPS @ 1GHz))"
            ],
          "brief":
            [

            ],
          "gain":
            [
              {
                "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                "title": "Code clean check",
                "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 6.50 to 4.00 cycles (1.62x speedup)."
              },
              {
                "details": "34% of VPU instructions are used in vector version (process two or more data elements in vector registers):\n - 20% of VPU loads are used in vector version.\n - 8% of VPU instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\n",
                "title": "Vectorization",
                "txt": "Your loop is poorly vectorized.\nOnly 70% of vector register length is used (average across all VPU instructions).\n"
              }
            ],
          "potential":
            [
              {
                "title": "Expensive FP math instructions/calls",
                "txt": "Detected performance impact from expensive FP math instructions/calls.\nBy removing/reexpressing them, you can lower the cost of an iteration from 6.50 to 0.50 cycles (13.00x speedup)."
              },
              {
                "workaround": "Try to change order in which elements are evaluated (using parentheses) in arithmetic expressions containing both ADD/SUB and MUL operations to enable your compiler to generate FMA instructions wherever possible.\nFor instance a + b*c is a valid FMA (MUL then ADD).\nHowever (a+b)* c cannot be translated into an FMA (ADD then MUL).",
                "title": "FMA",
                "txt": "Presence of both ADD/SUB and MUL operations."
              }
            ]
        },
      "paths":
        [
          {
            "hint":
              [
                {
                  "title": "Matching between your loop (in the source code) and the binary loop",
                  "txt": "The binary loop is composed of 16 FP arithmetical operations:\n - 8: addition or subtraction\n - 8: multiply\nThe binary loop is loading 32 bytes.\nThe binary loop is storing 18 bytes."
                },
                {
                  "title": "Arithmetic intensity",
                  "txt": "Arithmetic intensity is 0.32 FP operations per loaded or stored byte."
                }
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 35\nloop length        : 140\nnb stack references: 0\n"
                },
                {
                  "title": "Front-end",
                  "txt": "FIT IN UOP CACHE\nfront end: 4.38 cycles\n"
                },
                {
                  "title": "Back-end",
                  "txt": "       | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9   | P10  | P11  | P12  | P13  | P14  | P15  | P16\n-----------------------------------------------------------------------------------------------------------------------------\nuops   | 1.50 | 1.50 | 1.50 | 1.50 | 1.50 | 1.50 | 6.50 | 6.50 | 2.00 | 2.00 | 2.00 | 2.00 | 2.33 | 2.33 | 2.33 | 0.00 | 0.00\ncycles | 1.50 | 1.50 | 1.50 | 1.50 | 1.50 | 1.50 | 6.50 | 6.50 | 2.00 | 2.00 | 2.00 | 2.00 | 2.33 | 2.33 | 2.33 | 0.00 | 0.00\n\nExecution ports to units layout:\n - P0: BRU\n - P1: BRU\n - P2: ALU\n - P3: ALU\n - P4: ALU\n - P5: ALU\n - P6: ALU\n - P7: ALU\n - P8 (128 bits): VPU, FP store data, ALU, DIV/SQRT\n - P9 (128 bits): VPU, ALU, FP store data\n - P10 (128 bits): VPU, ALU, DIV/SQRT\n - P11 (128 bits): ALU, VPU\n - P12 (256 bits): store address, load\n - P13 (256 bits): store address, load\n - P14 (256 bits): load\n - P15 (64 bits): store data\n - P16 (64 bits): store data\n\nCycles executing div or sqrt instructions: NA\n"
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 4.38\nOverall L1: 6.50\n"
                },
                {
                  "title": "Vectorization ratios",
                  "txt": "INT\nall    : 17%\nload   : 20%\nstore  : 100%\nmul    : NA (no mul vectorizable/vectorized instructions)\nadd-sub: NA (no add-sub vectorizable/vectorized instructions)\nfma    : NA (no fma vectorizable/vectorized instructions)\nother  : 0%\nFP\nall     : 83%\nload    : NA (no load vectorizable/vectorized instructions)\nstore   : NA (no store vectorizable/vectorized instructions)\nmul     : 100%\nadd-sub : 100%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 50%\nINT+FP\nall     : 34%\nload    : 20%\nstore   : 100%\nmul     : 100%\nadd-sub : 100%\nfma     : NA (no fma vectorizable/vectorized instructions)\ndiv/sqrt: NA (no div/sqrt vectorizable/vectorized instructions)\nother   : 8%\n"
                },
                {
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each iteration of the binary loop takes 6.50 cycles. At this rate:\n - 5% of peak load performance is reached (4.92 out of 96.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 5% of peak store performance is reached (2.77 out of 48.00 bytes stored per cycle (GB/s @ 1GHz))\n"
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the loop is: 401bcc\n\nInstruction                           | Nb FU | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9   | P10  | P11  | P12  | P13  | P14  | P15 | P16 | Latency | Recip. throughput | Vectorization\n----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nMOVZ W1, #12160                       | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.17              | scal (25.0%)\nWHILELO P15.S, X22, X24               | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 3       | 1                 | N/A\nADD X2, SP, #208                      | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.17              | N/A\nSTR P15, [X2, #7, MUL VL]             | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0   | 0   | 1       | 0.50              | vect (12.5%)\nDUP Z31.S, #0                         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0   | 0   | 2       | 0.25              | scal (6.3%)\nCNTW X0, ALL                          | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 0.50              | N/A\nMOVZ X20, #0                          | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.17              | scal (50.0%)\nPTRUE P15.S, ALL                      | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 0.50              | scal (100.0%)\nFMOV S14, W1                          | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0   | 0   | 2       | 0.25              | scal (25.0%)\nCBZ X0, 401bcc <main._omp_fn.0+0x2e0> | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPTRUE P7.B, ALL                       | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 0.50              | scal (100.0%)\nADDPL X0, SP, #4                      | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 0.50              | N/A\nLD1RW {Z0.S}, P7/Z, [X0, #43]         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 6       | 0.33              | scal (25.0%)\nPTRUE P0.S, ALL                       | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 0.50              | scal (100.0%)\nFMUL Z0.S, Z0.S, Z31.S                | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0   | 0   | 3       | 0.25              | vect (100.0%)\nPTRUE P7.B, ALL                       | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 0.50              | scal (100.0%)\nADDPL X0, SP, #6                      | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 0.50              | N/A\nLD1RW {Z30.S}, P7/Z, [X0, #51]        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 6       | 0.33              | scal (25.0%)\nINCD X22, ALL                         | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 0.50              | N/A\nPTRUE P7.B, ALL                       | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 0.50              | scal (100.0%)\nFCMGT P6.S, P7/Z, Z31.S, Z30.S        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 1                 | vect (100.0%)\nBL 401350 <@plt_start@+0x1d0>         | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\nPTRUE P7.B, ALL                       | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 0.50              | scal (100.0%)\nADDPL X0, SP, #4                      | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 0.50              | N/A\nLD1RW {Z31.S}, P7/Z, [X0, #41]        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 6       | 0.33              | scal (25.0%)\nFMUL Z31.S, Z31.S, Z0.S               | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0   | 0   | 3       | 0.25              | vect (100.0%)\nPTRUE P7.B, ALL                       | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 2       | 0.50              | scal (100.0%)\nLD1RW {Z30.S}, P7/Z, [X0, #42]        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 6       | 0.33              | scal (25.0%)\nADD X0, SP, #208                      | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.17              | N/A\nFADD Z31.S, Z31.S, Z30.S              | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0   | 0   | 2       | 0.25              | vect (100.0%)\nLDR Z30, [X0, #1, MUL VL]             | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.33 | 0.33 | 0.33 | 0   | 0   | 6       | 0.33              | vect (100.0%)\nFADD Z30.S, P6/M, Z30.S, Z31.S        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.25 | 0.25 | 0.25 | 0.25 | 0    | 0    | 0    | 0   | 0   | 2       | 0.25              | vect (100.0%)\nSTR Z30, [X0, #1, MUL VL]             | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0.50 | 0.50 | 0    | 0   | 0   | 2       | 0.50              | vect (100.0%)\nCMP X24, X22                          | 1     | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.33              | N/A\nB.HI 401a18 <main._omp_fn.0+0x12c>    | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 1       | 0.50              | N/A\n"
                }
              ],
            "header":
              [
              "Warnings:\nget_path_cqa_results:\n - Detected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.\n",
              "7% of peak computational performance is used (2.46 out of 32.00 FLOP per cycle (GFLOPS @ 1GHz))"
              ],
            "brief":
              [

              ],
            "gain":
              [
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                  "title": "Code clean check",
                  "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 6.50 to 4.00 cycles (1.62x speedup)."
                },
                {
                  "details": "34% of VPU instructions are used in vector version (process two or more data elements in vector registers):\n - 20% of VPU loads are used in vector version.\n - 8% of VPU instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\n",
                  "title": "Vectorization",
                  "txt": "Your loop is poorly vectorized.\nOnly 70% of vector register length is used (average across all VPU instructions).\n"
                }
              ],
            "potential":
              [
                {
                  "title": "Expensive FP math instructions/calls",
                  "txt": "Detected performance impact from expensive FP math instructions/calls.\nBy removing/reexpressing them, you can lower the cost of an iteration from 6.50 to 0.50 cycles (13.00x speedup)."
                },
                {
                  "workaround": "Try to change order in which elements are evaluated (using parentheses) in arithmetic expressions containing both ADD/SUB and MUL operations to enable your compiler to generate FMA instructions wherever possible.\nFor instance a + b*c is a valid FMA (MUL then ADD).\nHowever (a+b)* c cannot be translated into an FMA (ADD then MUL).",
                  "title": "FMA",
                  "txt": "Presence of both ADD/SUB and MUL operations."
                }
              ]
          }
        ],
      "common":
        {
          "header":
            [
            "The loop is defined in:\n - /tools/acfl/24.10/gcc-14.2.0_AmazonLinux-2/include/c++/14.2.0/bits/random.h:248,1760,1766,1782,2173-2175\n - /tools/acfl/24.10/gcc-14.2.0_AmazonLinux-2/include/c++/14.2.0/bits/char_traits.h:350,427\n - /tools/acfl/24.10/gcc-14.2.0_AmazonLinux-2/include/c++/14.2.0/bits/basic_string.h:194,223-228,269,294\n - /tools/acfl/24.10/gcc-14.2.0_AmazonLinux-2/include/c++/14.2.0/bits/random.tcc:330-342,3370\n - /tools/acfl/24.10/gcc-14.2.0_AmazonLinux-2/include/c++/14.2.0/bits/new_allocator.h:172\n - /fsx/home/etud9-2/Black-sholes/BSM_32.cxx:96-113,122-131\n\n",
            "Warnings:\n - get_cqa_results:\n  * Non-innermost loop: analyzing only self part (ignoring child loops).\n  * Ignoring paths for analysis\n  * Failed to get the number of paths\n - metrics:\n  * RecMII not computed since number of paths is unknown or > max_paths\n  * Streams not analyzed since number of paths is unknown or > max_paths\n"
            ]
        }
    }
}
