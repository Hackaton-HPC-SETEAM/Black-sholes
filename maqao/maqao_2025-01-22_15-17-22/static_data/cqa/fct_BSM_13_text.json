{
  "_cqa_text_report":
    {
      "_objects":
        {
          "image_vec_align":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/vec_align.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_128":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_128.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_8x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/8x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_2x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_2x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/2x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x64_256":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x64_256.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_1x32_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/1x32_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_4x64_512":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/4x64_512.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_row_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/row_maj.svg",
              "size":
                {
                  "x": 500
                }
            },
          "image_col_maj":
            {
              "type": "image",
              "format": "url",
              "data": "../images/cqa/col_maj.svg",
              "size":
                {
                  "x": 500
                }
            }
        },
      "AVG":
        {
          "hint":
            [
              {
                "title": "Matching between your function (in the source code) and the binary function",
                "txt": "The binary function does not contain any FP arithmetical operations.\nThe binary function is loading 64 bytes.\nThe binary function is storing 192 bytes."
              }
            ],
          "expert":
            [
              {
                "title": "General properties",
                "txt": "nb instructions    : 48\nloop length        : 192\nnb stack references: 0\n"
              },
              {
                "title": "Front-end",
                "txt": "FIT IN UOP CACHE\nfront end: 5.75 cycles\n"
              },
              {
                "title": "Back-end",
                "txt": "       | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9   | P10  | P11  | P12  | P13  | P14  | P15  | P16\n-----------------------------------------------------------------------------------------------------------------------------\nuops   | 5.00 | 5.00 | 3.33 | 3.42 | 3.33 | 3.33 | 3.33 | 3.25 | 3.50 | 3.50 | 0.00 | 0.00 | 7.50 | 7.50 | 5.00 | 4.00 | 4.00\ncycles | 5.00 | 5.00 | 3.33 | 3.42 | 3.33 | 3.33 | 3.33 | 3.25 | 3.50 | 3.50 | 0.00 | 0.00 | 7.50 | 7.50 | 5.00 | 4.00 | 4.00\n\nExecution ports to units layout:\n - P0: BRU\n - P1: BRU\n - P2: ALU\n - P3: ALU\n - P4: ALU\n - P5: ALU\n - P6: ALU\n - P7: ALU\n - P8 (128 bits): VPU, FP store data, ALU, DIV/SQRT\n - P9 (128 bits): VPU, ALU, FP store data\n - P10 (128 bits): VPU, ALU, DIV/SQRT\n - P11 (128 bits): ALU, VPU\n - P12 (256 bits): store address, load\n - P13 (256 bits): store address, load\n - P14 (256 bits): load\n - P15 (64 bits): store data\n - P16 (64 bits): store data\n\nCycles executing div or sqrt instructions: 5.00-20.00\n"
              },
              {
                "title": "Cycles summary",
                "txt": "Front-end : 5.75\nOverall L1: 7.50-20.00\n"
              },
              {
                "title": "Vectorization ratios",
                "txt": "all     : 15%\nload    : 20%\nstore   : 26%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 0%\nfma     : 0%\ndiv/sqrt: 0%\nother   : 0%\n"
              },
              {
                "title": "Cycles and memory resources usage",
                "txt": "Assuming all data fit into the L1 cache, each call to the function takes 20.00 cycles. At this rate:\n - 3% of peak load performance is reached (3.20 out of 96.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 20% of peak store performance is reached (9.60 out of 48.00 bytes stored per cycle (GB/s @ 1GHz))\n"
              },
              {
                "title": "ASM code",
                "txt": "In the binary file, the address of the function is: 401a88\n\nInstruction                            | Nb FU | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9   | P10 | P11 | P12  | P13  | P14  | P15  | P16  | Latency | Recip. throughput | Vectorization\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nSUB SP, SP, #2416                      | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | N/A\nSUB SP, SP, #19                        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 2       | 0.50              | N/A\nSTP X29, X30, [SP]                     | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (100.0%)\nADD X29, SP, #0                        | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nSTP D12, D13, [SP, #128]               | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 0    | 2       | 0.50              | vect (100.0%)\nLDP D0, D13, [X0, #16]                 | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.33 | 0.33 | 0.33 | 0    | 0    | 6       | 0.33              | vect (100.0%)\nSTP X19, X20, [SP, #16]                | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (100.0%)\nSTP X21, X22, [SP, #32]                | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (100.0%)\nSTR D0, [SP, #200]                     | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 0    | 2       | 0.50              | scal (50.0%)\nLDR D0, [X0, #32]                      | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.33 | 0.33 | 0.33 | 0    | 0    | 6       | 0.33              | scal (50.0%)\nLDP X21, X20, [X0]                     | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.33 | 0.33 | 0.33 | 0    | 0    | 4       | 0.50              | scal (100.0%)\nSTP X25, X26, [SP, #64]                | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (100.0%)\nORR X25, XZR, X0                       | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nSTR D0, [SP, #192]                     | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 0    | 2       | 0.50              | scal (50.0%)\nLDR D0, [X0, #40]                      | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.33 | 0.33 | 0.33 | 0    | 0    | 6       | 0.33              | scal (50.0%)\nSTR D0, [SP, #184]                     | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 0    | 2       | 0.50              | scal (50.0%)\nCBZ X20, 401c20 <main._omp_fn.0+0x198> | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nSTP X23, X24, [SP, #48]                | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (100.0%)\nBL 401300 <@plt_start@+0xc0>           | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nSBFM X19, X0, #0, #31                  | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (100.0%)\nBL 401310 <@plt_start@+0xd0>           | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nUDIV X26, X20, X19                     | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 5-20    | 5-20              | scal (50.0%)\nSBFM X24, X0, #0, #31                  | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (100.0%)\nMSUB X0, X26, X19, X20                 | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 2       | 1                 | N/A\nCMP X24, X0                            | 1     | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.33              | scal (50.0%)\nB.CC 401d7c <main._omp_fn.0+0x2f4>     | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nMADD X24, X26, X24, X0                 | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 2       | 1                 | scal (50.0%)\nADD X26, X26, X24                      | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nCMP X24, X26                           | 1     | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.33              | scal (50.0%)\nB.CS 401c1c <main._omp_fn.0+0x194>     | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nSTR XZR, [SP, #176]                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (50.0%)\nMRS X19, #24194                        |       |      |      |      |      |      |      |      |      |      |      |     |     |      |      |      |      |      |         |                   | scal (50.0%)\nCBZ X21, 401c1c <main._omp_fn.0+0x194> | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nADD X22, SP, #224                      | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nSTR X27, [SP, #80]                     | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (50.0%)\nSTP D8, D9, [SP, #96]                  | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 0    | 2       | 0.50              | vect (100.0%)\nSTP D10, D11, [SP, #112]               | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 0    | 2       | 0.50              | vect (100.0%)\nSTP D14, D15, [SP, #144]               | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 0    | 2       | 0.50              | vect (100.0%)\nLDP X23, X24, [SP, #48]                | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.33 | 0.33 | 0.33 | 0    | 0    | 4       | 0.50              | scal (100.0%)\nSTR XZR, [SP, #176]                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (50.0%)\nB 401c98 <main._omp_fn.0+0x210>        | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nADD X26, X26, #1                       | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nMOVZ X0, #0                            | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | N/A\nB 401af0 <main._omp_fn.0+0x68>         | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nADD X0, SP, #208                       | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | N/A\nBL 401420 <@plt_start@+0x1e0>          | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nBL 401470 <@plt_start@+0x230>          | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nHINT #0                                |       |      |      |      |      |      |      |      |      |      |      |     |     |      |      |      |      |      |         |                   | N/A\n"
              }
            ],
          "header":
            [
            "Warnings:\n - The number of fused uops of the instruction [MRS	X19, #24194] is unknown\n - The number of fused uops of the instruction [HINT	#0] is unknown\n - Detected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.\n",
            "0% of peak computational performance is used (0.00 out of 32.00 FLOP per cycle (GFLOPS @ 1GHz))"
            ],
          "brief":
            [

            ],
          "gain":
            [
              {
                "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                "title": "Code clean check",
                "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 20.00 to 3.50 cycles (5.71x speedup)."
              },
              {
                "workaround": " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA)\n",
                "details": "15% of VPU instructions are used in vector version (process two or more data elements in vector registers):\n - 20% of VPU loads are used in vector version.\n - 26% of VPU stores are used in vector version.\n - 0% of VPU addition or subtraction instructions are used in vector version.\n - 0% of VPU fused multiply-add instructions are used in vector version.\n - 0% of VPU divide and square root instructions are used in vector version.\n - 0% of VPU instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\nSince your execution units are vector units, only a fully vectorized function can use their full power.\n",
                "title": "Vectorization",
                "txt": "Your function is not vectorized.\nOnly 71% of vector register length is used (average across all VPU instructions).\nBy fully vectorizing your function, you can lower the cost of an iteration from 20.00 to 10.00 cycles (2.00x speedup)."
              }
            ],
          "potential":
            [
              {
                "title": "Expensive FP math instructions/calls",
                "txt": "Detected performance impact from expensive FP math instructions/calls.\nBy removing/reexpressing them, you can lower the cost of an iteration from 20.00 to 2.00 cycles (10.00x speedup)."
              }
            ]
        },
      "paths":
        [
          {
            "hint":
              [
                {
                  "title": "Matching between your function (in the source code) and the binary function",
                  "txt": "The binary function does not contain any FP arithmetical operations.\nThe binary function is loading 64 bytes.\nThe binary function is storing 192 bytes."
                }
              ],
            "expert":
              [
                {
                  "title": "General properties",
                  "txt": "nb instructions    : 48\nloop length        : 192\nnb stack references: 0\n"
                },
                {
                  "title": "Front-end",
                  "txt": "FIT IN UOP CACHE\nfront end: 5.75 cycles\n"
                },
                {
                  "title": "Back-end",
                  "txt": "       | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9   | P10  | P11  | P12  | P13  | P14  | P15  | P16\n-----------------------------------------------------------------------------------------------------------------------------\nuops   | 5.00 | 5.00 | 3.33 | 3.42 | 3.33 | 3.33 | 3.33 | 3.25 | 3.50 | 3.50 | 0.00 | 0.00 | 7.50 | 7.50 | 5.00 | 4.00 | 4.00\ncycles | 5.00 | 5.00 | 3.33 | 3.42 | 3.33 | 3.33 | 3.33 | 3.25 | 3.50 | 3.50 | 0.00 | 0.00 | 7.50 | 7.50 | 5.00 | 4.00 | 4.00\n\nExecution ports to units layout:\n - P0: BRU\n - P1: BRU\n - P2: ALU\n - P3: ALU\n - P4: ALU\n - P5: ALU\n - P6: ALU\n - P7: ALU\n - P8 (128 bits): VPU, FP store data, ALU, DIV/SQRT\n - P9 (128 bits): VPU, ALU, FP store data\n - P10 (128 bits): VPU, ALU, DIV/SQRT\n - P11 (128 bits): ALU, VPU\n - P12 (256 bits): store address, load\n - P13 (256 bits): store address, load\n - P14 (256 bits): load\n - P15 (64 bits): store data\n - P16 (64 bits): store data\n\nCycles executing div or sqrt instructions: 5.00-20.00\n"
                },
                {
                  "title": "Cycles summary",
                  "txt": "Front-end : 5.75\nOverall L1: 7.50-20.00\n"
                },
                {
                  "title": "Vectorization ratios",
                  "txt": "all     : 15%\nload    : 20%\nstore   : 26%\nmul     : NA (no mul vectorizable/vectorized instructions)\nadd-sub : 0%\nfma     : 0%\ndiv/sqrt: 0%\nother   : 0%\n"
                },
                {
                  "title": "Cycles and memory resources usage",
                  "txt": "Assuming all data fit into the L1 cache, each call to the function takes 20.00 cycles. At this rate:\n - 3% of peak load performance is reached (3.20 out of 96.00 bytes loaded per cycle (GB/s @ 1GHz))\n - 20% of peak store performance is reached (9.60 out of 48.00 bytes stored per cycle (GB/s @ 1GHz))\n"
                },
                {
                  "title": "ASM code",
                  "txt": "In the binary file, the address of the function is: 401a88\n\nInstruction                            | Nb FU | P0   | P1   | P2   | P3   | P4   | P5   | P6   | P7   | P8   | P9   | P10 | P11 | P12  | P13  | P14  | P15  | P16  | Latency | Recip. throughput | Vectorization\n-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\nSUB SP, SP, #2416                      | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | N/A\nSUB SP, SP, #19                        | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 2       | 0.50              | N/A\nSTP X29, X30, [SP]                     | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (100.0%)\nADD X29, SP, #0                        | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nSTP D12, D13, [SP, #128]               | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 0    | 2       | 0.50              | vect (100.0%)\nLDP D0, D13, [X0, #16]                 | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.33 | 0.33 | 0.33 | 0    | 0    | 6       | 0.33              | vect (100.0%)\nSTP X19, X20, [SP, #16]                | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (100.0%)\nSTP X21, X22, [SP, #32]                | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (100.0%)\nSTR D0, [SP, #200]                     | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 0    | 2       | 0.50              | scal (50.0%)\nLDR D0, [X0, #32]                      | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.33 | 0.33 | 0.33 | 0    | 0    | 6       | 0.33              | scal (50.0%)\nLDP X21, X20, [X0]                     | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.33 | 0.33 | 0.33 | 0    | 0    | 4       | 0.50              | scal (100.0%)\nSTP X25, X26, [SP, #64]                | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (100.0%)\nORR X25, XZR, X0                       | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nSTR D0, [SP, #192]                     | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 0    | 2       | 0.50              | scal (50.0%)\nLDR D0, [X0, #40]                      | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.33 | 0.33 | 0.33 | 0    | 0    | 6       | 0.33              | scal (50.0%)\nSTR D0, [SP, #184]                     | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 0    | 2       | 0.50              | scal (50.0%)\nCBZ X20, 401c20 <main._omp_fn.0+0x198> | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nSTP X23, X24, [SP, #48]                | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (100.0%)\nBL 401300 <@plt_start@+0xc0>           | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nSBFM X19, X0, #0, #31                  | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (100.0%)\nBL 401310 <@plt_start@+0xd0>           | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nUDIV X26, X20, X19                     | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 5-20    | 5-20              | scal (50.0%)\nSBFM X24, X0, #0, #31                  | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (100.0%)\nMSUB X0, X26, X19, X20                 | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 2       | 1                 | N/A\nCMP X24, X0                            | 1     | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.33              | scal (50.0%)\nB.CC 401d7c <main._omp_fn.0+0x2f4>     | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nMADD X24, X26, X24, X0                 | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 1    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 2       | 1                 | scal (50.0%)\nADD X26, X26, X24                      | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nCMP X24, X26                           | 1     | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0.25 | 0.25 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.33              | scal (50.0%)\nB.CS 401c1c <main._omp_fn.0+0x194>     | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nSTR XZR, [SP, #176]                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (50.0%)\nMRS X19, #24194                        |       |      |      |      |      |      |      |      |      |      |      |     |     |      |      |      |      |      |         |                   | scal (50.0%)\nCBZ X21, 401c1c <main._omp_fn.0+0x194> | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nADD X22, SP, #224                      | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nSTR X27, [SP, #80]                     | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (50.0%)\nSTP D8, D9, [SP, #96]                  | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 0    | 2       | 0.50              | vect (100.0%)\nSTP D10, D11, [SP, #112]               | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 0    | 2       | 0.50              | vect (100.0%)\nSTP D14, D15, [SP, #144]               | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0.50 | 0.50 | 0   | 0   | 0.50 | 0.50 | 0    | 0    | 0    | 2       | 0.50              | vect (100.0%)\nLDP X23, X24, [SP, #48]                | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.33 | 0.33 | 0.33 | 0    | 0    | 4       | 0.50              | scal (100.0%)\nSTR XZR, [SP, #176]                    | 1     | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0.50 | 0.50 | 0    | 0.50 | 0.50 | 1       | 0.50              | scal (50.0%)\nB 401c98 <main._omp_fn.0+0x210>        | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nADD X26, X26, #1                       | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | scal (50.0%)\nMOVZ X0, #0                            | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | N/A\nB 401af0 <main._omp_fn.0+0x68>         | 1     | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nADD X0, SP, #208                       | 1     | 0    | 0    | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0.17 | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.17              | N/A\nBL 401420 <@plt_start@+0x1e0>          | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nBL 401470 <@plt_start@+0x230>          | 1     | 0.50 | 0.50 | 0.50 | 0.50 | 0    | 0    | 0    | 0    | 0    | 0    | 0   | 0   | 0    | 0    | 0    | 0    | 0    | 1       | 0.50              | N/A\nHINT #0                                |       |      |      |      |      |      |      |      |      |      |      |     |     |      |      |      |      |      |         |                   | N/A\n"
                }
              ],
            "header":
              [
              "Warnings:\n - The number of fused uops of the instruction [MRS	X19, #24194] is unknown\n - The number of fused uops of the instruction [HINT	#0] is unknown\n - Detected a function call instruction: ignoring called function instructions.\nRerun with --follow-calls=append to include them to analysis  or with --follow-calls=inline to simulate inlining.\n",
              "0% of peak computational performance is used (0.00 out of 32.00 FLOP per cycle (GFLOPS @ 1GHz))"
              ],
            "brief":
              [

              ],
            "gain":
              [
                {
                  "workaround": " - Try to reorganize arrays of structures to structures of arrays\n - Consider to permute loops (see vectorization gain report)\n",
                  "title": "Code clean check",
                  "txt": "Detected a slowdown caused by scalar integer instructions (typically used for address computation).\nBy removing them, you can lower the cost of an iteration from 20.00 to 3.50 cycles (5.71x speedup)."
                },
                {
                  "workaround": " - Try another compiler or update/tune your current one\n - Make array accesses unit-stride:\n  * If your function streams arrays of structures (AoS), try to use structures of arrays instead (SoA)\n",
                  "details": "15% of VPU instructions are used in vector version (process two or more data elements in vector registers):\n - 20% of VPU loads are used in vector version.\n - 26% of VPU stores are used in vector version.\n - 0% of VPU addition or subtraction instructions are used in vector version.\n - 0% of VPU fused multiply-add instructions are used in vector version.\n - 0% of VPU divide and square root instructions are used in vector version.\n - 0% of VPU instructions that are not load, store, addition, subtraction nor multiply instructions are used in vector version.\nSince your execution units are vector units, only a fully vectorized function can use their full power.\n",
                  "title": "Vectorization",
                  "txt": "Your function is not vectorized.\nOnly 71% of vector register length is used (average across all VPU instructions).\nBy fully vectorizing your function, you can lower the cost of an iteration from 20.00 to 10.00 cycles (2.00x speedup)."
                }
              ],
            "potential":
              [
                {
                  "title": "Expensive FP math instructions/calls",
                  "txt": "Detected performance impact from expensive FP math instructions/calls.\nBy removing/reexpressing them, you can lower the cost of an iteration from 20.00 to 2.00 cycles (10.00x speedup)."
                }
              ]
          }
        ],
      "common":
        {
          "header":
            [
            "",
            "Warnings:\nIgnoring paths for analysis"
            ]
        }
    }
}
